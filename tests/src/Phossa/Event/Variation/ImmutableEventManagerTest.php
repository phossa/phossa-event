<?php
namespace Phossa\Event\Variation;

use Phossa\Event\EventManager;
use Phossa\Event\Event;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-01-29 at 10:15:02.
 */
class ImmutableEventManagerTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var ImmutableEventManager
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $manager  = new EventManager();
        $manager->attachListener(
            function($evt) {
                echo "TEST";
            },
            'test'
        );
        $this->object = new ImmutableEventManager($manager);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Phossa\Event\Variation\ImmutableEventManager::processEvent
     */
    public function testProcessEvent()
    {
        $this->object->processEvent(new Event('test'));
        $this->expectOutputString('TEST');
    }

    /**
     * @covers Phossa\Event\Variation\ImmutableEventManager::attachListener
     * @expectedExceptionCode Phossa\Event\Message\Message::IMMUTABLE_EVENT_METHOD
     * @expectedException Phossa\Event\Exception\BadMethodCallException
     * @expectedExceptionMessageRegExp /attachListener/
     */
    public function testAttachListener()
    {
        $this->object->attachListener(function($evt) {}, 'wow');
    }

    /**
     * @covers Phossa\Event\Variation\ImmutableEventManager::detachListener
     * @expectedExceptionCode Phossa\Event\Message\Message::IMMUTABLE_EVENT_METHOD
     * @expectedException Phossa\Event\Exception\BadMethodCallException
     * @expectedExceptionMessageRegExp /detachListener/
     */
    public function testDetachListener()
    {
        $this->object->detachListener('sprintf');
    }

    /**
     * @covers Phossa\Event\Variation\ImmutableEventManager::hasEventQueue
     */
    public function testHasEventQueue()
    {
        $this->assertTrue($this->object->hasEventQueue('test'));
        $this->assertFalse($this->object->hasEventQueue('test2'));
    }

    /**
     * @covers Phossa\Event\Variation\ImmutableEventManager::getEventQueue
     */
    public function testGetEventQueue1()
    {
        $this->assertTrue(
            $this->object->getEventQueue('test') instanceof \Phossa\Event\EventQueue
        );
    }

    /**
     * @covers Phossa\Event\Variation\ImmutableEventManager::getEventQueue
     * @expectedExceptionCode Phossa\Event\Message\Message::CALLABLE_NOT_FOUND
     * @expectedException Phossa\Event\Exception\NotFoundException
     */
    public function testGetEventQueue2()
    {
        $this->object->getEventQueue('test2');
    }

    /**
     * @covers Phossa\Event\Variation\ImmutableEventManager::clearEventQueue
     * @expectedExceptionCode Phossa\Event\Message\Message::IMMUTABLE_EVENT_METHOD
     * @expectedException Phossa\Event\Exception\BadMethodCallException
     * @expectedExceptionMessageRegExp /clearEventQueue/
     */
    public function testClearEventQueue()
    {
        $this->object->clearEventQueue('test');
    }

    /**
     * @covers Phossa\Event\Variation\ImmutableEventManager::getEventNames
     */
    public function testGetEventNames()
    {
        $names = $this->object->getEventNames();
        $this->assertEquals(['test'], $names);
    }
}
