<?php

namespace Phossa\Event;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-10-22 at 08:09:39.
 */
class EventManagerAdvancedTest
    extends \PHPUnit_Framework_TestCase
{

    /**
     * @var EventManagerAdvanced
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new EventManagerAdvanced;
        require_once __DIR__ . '/Listener.php';
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    /**
     * @covers Phossa\Event\EventManagerAdvanced::setOtherManager
     */
    public function testSetOtherManager()
    {
        $global = new EventManager();
        $this->object->setOtherManager('global', $global);

        $pool = $this->object->getOtherManagers();
        $this->assertTrue($global === $pool['global']);
    }

    /**
     * @covers Phossa\Event\EventManagerAdvanced::unsetOtherManager
     * @todo   Implement testUnsetOtherManager().
     */
    public function testUnsetOtherManager()
    {
        $global = new EventManager();
        $this->object->setOtherManager('global', $global);

        $pool = $this->object->getOtherManagers();
        $this->assertTrue($global === $pool['global']);

        $this->object->unsetOtherManager('global');
        $pool = $this->object->getOtherManagers();
        $this->assertTrue(0 === count($pool));
    }

    /**
     * @covers Phossa\Event\EventManagerAdvanced::processEvent
     */
    public function testProcessEvent()
    {
        $l = new Listener();

        // another manager with attached events
        $global = new EventManager();
        $this->object->setOtherManager('global', $global);
        $global->attachListener($l);

        // trigger event by $this manager
        $evt = new Event('evtTest4', $this);
        $evt = $this->object->processEvent($evt, function() {
            return true;
        });

        $this->assertArrayHasKey('testX', $evt->getProperties());
        $this->assertArrayHasKey('testY', $evt->getProperties());
        $this->assertArrayHasKey('wow', $evt->getProperties());
        $this->assertArrayHasKey('bingo', $evt->getProperties());
        $this->assertArrayHasKey('bingo2', $evt->getProperties());
        $this->assertArrayNotHasKey('testZ', $evt->getProperties());
    }

    /**
     * @covers Phossa\Event\EventManagerAdvanced::matchEventQueue
     * @todo   Implement testMatchEventQueue().
     */
    public function testMatchEventQueue()
    {
        $l = new Listener();
        $this->object->attachListener($l);

        $queue = $this->object->matchEventQueue('evtTest3', $this->object);
        $this->assertTrue($queue->count() === 5);
    }

}
