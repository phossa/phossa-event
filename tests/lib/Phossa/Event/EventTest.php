<?php

namespace Phossa\Event;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-10-21 at 08:50:03.
 */
class EventTest
    extends \PHPUnit_Framework_TestCase
{

    /**
     * @var Event
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Event('test', $this, ['invoker' => $this]);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    /**
     * @covers Phossa\Event\Event::setName
     */
    public function testSetName()
    {
        $newname = 'newname';
        $this->object->setName($newname);
        $this->assertTrue($newname === $this->object->getName());
    }

    /**
     * @covers Phossa\Event\Event::getName
     */
    public function testGetName()
    {
        $newname = 'newname';
        $this->object->setName($newname);
        $this->assertTrue($newname === $this->object->getName());
    }

    /**
     * @covers Phossa\Event\Event::setContext
     */
    public function testSetContext1()
    {
        // test object
        $this->assertTrue($this === $this->object->getContext());

        // test class name
        $this->object->setContext(get_class($this->object));
    }

    /**
     * @covers Phossa\Event\Event::setContext
     * @expectedExceptionCode Phossa\Event\Message\Message::WRONG_EVENT_TARGET
     * @expectedException Phossa\Event\Exception\InvalidArgumentException
     */
    public function testSetContext2()
    {
        $this->object->setContext('Event');
    }

    /**
     * @covers Phossa\Event\Event::getContext
     */
    public function testGetContext()
    {
        $this->object->setContext(get_class($this->object));
        $this->assertTrue(get_class($this->object) === $this->object->getContext());
    }

    /**
     * @covers Phossa\Event\Event::hasProperty
     */
    public function testHasProperty()
    {
        $this->assertTrue($this->object->hasProperty('invoker'));
    }

    /**
     * @covers Phossa\Event\Event::getProperty
     */
    public function testGetProperty1()
    {
        $this->assertTrue($this === $this->object->getProperty('invoker'));
    }

    /**
     * @covers Phossa\Event\Event::getProperty
     * @expectedExceptionCode Phossa\Event\Message\Message::PROPERTY_NOT_FOUND
     * @expectedException Phossa\Event\Exception\NotFoundException
     */
    public function testGetProperty2()
    {
        $this->assertTrue($this === $this->object->getProperty('wow'));
    }

    /**
     * @covers Phossa\Event\Event::setProperty
     */
    public function testSetProperty()
    {
        $this->object->setProperty('wow', 'bingo');
        $this->assertTrue('bingo' === $this->object->getProperty('wow'));
    }

    /**
     * @covers Phossa\Event\Event::getProperties
     */
    public function testGetProperties()
    {
        $p = $this->object->getProperties();
        $this->assertArrayHasKey('invoker', $p);
    }

    /**
     * @covers Phossa\Event\Event::setProperties
     * @todo   Implement testSetProperties().
     */
    public function testSetProperties()
    {
        $a = ['a' => 'aa', 'b' => 'bb'];
        $this->object->setProperties($a);
        $this->assertTrue($a === $this->object->getProperties());
    }

    /**
     * @covers Phossa\Event\Event::stopPropagation
     */
    public function testStopPropagation()
    {
        $this->assertTrue(false === $this->object->isPropagationStopped());
        $this->object->stopPropagation();
        $this->assertTrue(true === $this->object->isPropagationStopped());
    }

    /**
     * @covers Phossa\Event\Event::isPropagationStopped
     */
    public function testIsPropagationStopped()
    {
        $this->assertTrue(false === $this->object->isPropagationStopped());
        $this->object->stopPropagation();
        $this->assertTrue(true === $this->object->isPropagationStopped());
    }

}
