<?php

namespace Phossa\Event;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-10-21 at 08:50:02.
 */
class EventFactoryTest
    extends \PHPUnit_Framework_TestCase
{

    /**
     * @var EventFactory
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new EventFactory;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    public function testData()
    {
        return [
            ['testEvent', $this, [ 'wow' => 'wow wow']]
        ];
    }

    /**
     * @covers Phossa\Event\EventFactory::createEvent
     * @dataProvider testData
     */
    public function testCreateEvent1($name, $context, $properties)
    {
        // normal case
        $evt = $this->object->createEvent($name, $context, $properties);

        // check name
        $this->assertTrue($name === $evt->getName());

        // check context
        $this->assertTrue($context === $evt->getContext());

        // check properties
        $this->assertTrue($evt->getProperty('wow') === $properties['wow']);
    }

    /**
     * @covers Phossa\Event\EventFactory::createEvent
     * @dataProvider testData
     * @expectedExceptionCode Phossa\Event\Message\Message::WRONG_EVENT_NAME
     * @expectedException Phossa\Event\Exception\InvalidArgumentException
     */
    public function testCreateEvent2($name, $context, $properties)
    {
        // wrong name
        $this->object->createEvent('', $context, $properties);
    }

    /**
     * @covers Phossa\Event\EventFactory::createEvent
     * @dataProvider testData
     * @expectedExceptionCode Phossa\Event\Message\Message::WRONG_EVENT_TARGET
     * @expectedException Phossa\Event\Exception\InvalidArgumentException
     */
    public function testCreateEvent3($name, $context, $properties)
    {
        // wrong name
        $this->object->createEvent($name, 'wrong', $properties);
    }

}
